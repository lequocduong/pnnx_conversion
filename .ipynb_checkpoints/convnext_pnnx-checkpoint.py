import os
import numpy as np
import tempfile, zipfile
import torch
import torch.nn as nn
import torch.nn.functional as F
try:
    import torchvision
except:
    pass

class Model(nn.Module):
    def __init__(self):
        super(Model, self).__init__()

        self.conv2d_0 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=3, kernel_size=(2,2), out_channels=16, padding=(0,0), padding_mode='replicate', stride=(2,2))
        self.op_1_1 = nn.LayerNorm(elementwise_affine=True, eps=0.000001, normalized_shape=(16,))
        self.stages_0_0_dwconv = nn.Conv2d(bias=True, dilation=(1,1), groups=16, in_channels=16, kernel_size=(7,7), out_channels=16, padding=(3,3), padding_mode='zeros', stride=(1,1))
        self.ln_0 = nn.LayerNorm(elementwise_affine=True, eps=0.000001, normalized_shape=(16,))
        self.stages_0_0_pwconv1 = nn.Linear(bias=True, in_features=16, out_features=64)
        self.stages_0_0_act = nn.GELU()
        self.stages_0_0_pwconv2 = nn.Linear(bias=True, in_features=64, out_features=16)
        self.op_1_4 = nn.LayerNorm(elementwise_affine=True, eps=0.000001, normalized_shape=(16,))
        self.downsample_layers_1_1 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=16, kernel_size=(2,2), out_channels=32, padding=(0,0), padding_mode='zeros', stride=(2,2))
        self.stages_1_0_dwconv = nn.Conv2d(bias=True, dilation=(1,1), groups=32, in_channels=32, kernel_size=(7,7), out_channels=32, padding=(3,3), padding_mode='zeros', stride=(1,1))
        self.ln_1 = nn.LayerNorm(elementwise_affine=True, eps=0.000001, normalized_shape=(32,))
        self.stages_1_0_pwconv1 = nn.Linear(bias=True, in_features=32, out_features=128)
        self.stages_1_0_act = nn.GELU()
        self.stages_1_0_pwconv2 = nn.Linear(bias=True, in_features=128, out_features=32)
        self.op_1_7 = nn.LayerNorm(elementwise_affine=True, eps=0.000001, normalized_shape=(32,))
        self.downsample_layers_2_1 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=32, kernel_size=(2,2), out_channels=64, padding=(0,0), padding_mode='zeros', stride=(2,2))
        self.stages_2_0_dwconv = nn.Conv2d(bias=True, dilation=(1,1), groups=64, in_channels=64, kernel_size=(7,7), out_channels=64, padding=(3,3), padding_mode='zeros', stride=(1,1))
        self.ln_2 = nn.LayerNorm(elementwise_affine=True, eps=0.000001, normalized_shape=(64,))
        self.stages_2_0_pwconv1 = nn.Linear(bias=True, in_features=64, out_features=256)
        self.stages_2_0_act = nn.GELU()
        self.stages_2_0_pwconv2 = nn.Linear(bias=True, in_features=256, out_features=64)
        self.stages_2_1_dwconv = nn.Conv2d(bias=True, dilation=(1,1), groups=64, in_channels=64, kernel_size=(7,7), out_channels=64, padding=(3,3), padding_mode='zeros', stride=(1,1))
        self.ln_3 = nn.LayerNorm(elementwise_affine=True, eps=0.000001, normalized_shape=(64,))
        self.stages_2_1_pwconv1 = nn.Linear(bias=True, in_features=64, out_features=256)
        self.stages_2_1_act = nn.GELU()
        self.stages_2_1_pwconv2 = nn.Linear(bias=True, in_features=256, out_features=64)
        self.op_1_10 = nn.LayerNorm(elementwise_affine=True, eps=0.000001, normalized_shape=(64,))
        self.downsample_layers_3_1 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=64, kernel_size=(2,2), out_channels=128, padding=(0,0), padding_mode='zeros', stride=(2,2))
        self.stages_3_0_dwconv = nn.Conv2d(bias=True, dilation=(1,1), groups=128, in_channels=128, kernel_size=(7,7), out_channels=128, padding=(3,3), padding_mode='zeros', stride=(1,1))
        self.ln_4 = nn.LayerNorm(elementwise_affine=True, eps=0.000001, normalized_shape=(128,))
        self.stages_3_0_pwconv1 = nn.Linear(bias=True, in_features=128, out_features=512)
        self.stages_3_0_act = nn.GELU()
        self.stages_3_0_pwconv2 = nn.Linear(bias=True, in_features=512, out_features=128)
        self.op_1_13 = nn.LayerNorm(elementwise_affine=True, eps=0.000001, normalized_shape=(256,))
        self.upsample_layers_0_1 = nn.ConvTranspose2d(bias=True, dilation=(1,1), groups=1, in_channels=256, kernel_size=(2,2), out_channels=64, output_padding=(0,0), padding=(0,0), stride=(2,2))
        self.op_1_16 = nn.LayerNorm(elementwise_affine=True, eps=0.000001, normalized_shape=(128,))
        self.upsample_layers_1_1 = nn.ConvTranspose2d(bias=True, dilation=(1,1), groups=1, in_channels=128, kernel_size=(2,2), out_channels=32, output_padding=(0,0), padding=(0,0), stride=(2,2))
        self.op_1_19 = nn.LayerNorm(elementwise_affine=True, eps=0.000001, normalized_shape=(64,))
        self.upsample_layers_2_1 = nn.ConvTranspose2d(bias=True, dilation=(1,1), groups=1, in_channels=64, kernel_size=(2,2), out_channels=16, output_padding=(0,0), padding=(0,0), stride=(2,2))
        self.op_1_22 = nn.LayerNorm(elementwise_affine=True, eps=0.000001, normalized_shape=(32,))
        self.upsample_layers_3_1 = nn.ConvTranspose2d(bias=True, dilation=(1,1), groups=1, in_channels=32, kernel_size=(2,2), out_channels=8, output_padding=(0,0), padding=(0,0), stride=(2,2))
        self.out_conv = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=8, kernel_size=(1,1), out_channels=3, padding=(0,0), padding_mode='zeros', stride=(1,1))

        archive = zipfile.ZipFile('convnext.pnnx.bin', 'r')
        self.conv2d_0.bias = self.load_pnnx_bin_as_parameter(archive, 'conv2d_0.bias', (16), 'float32')
        self.conv2d_0.weight = self.load_pnnx_bin_as_parameter(archive, 'conv2d_0.weight', (16,3,2,2), 'float32')
        self.op_1_1.bias = self.load_pnnx_bin_as_parameter(archive, 'op_1_1.bias', (16), 'float32')
        self.op_1_1.weight = self.load_pnnx_bin_as_parameter(archive, 'op_1_1.weight', (16), 'float32')
        self.stages_0_0_dwconv.bias = self.load_pnnx_bin_as_parameter(archive, 'stages.0.0.dwconv.bias', (16), 'float32')
        self.stages_0_0_dwconv.weight = self.load_pnnx_bin_as_parameter(archive, 'stages.0.0.dwconv.weight', (16,1,7,7), 'float32')
        self.ln_0.bias = self.load_pnnx_bin_as_parameter(archive, 'ln_0.bias', (16), 'float32')
        self.ln_0.weight = self.load_pnnx_bin_as_parameter(archive, 'ln_0.weight', (16), 'float32')
        self.stages_0_0_pwconv1.bias = self.load_pnnx_bin_as_parameter(archive, 'stages.0.0.pwconv1.bias', (64), 'float32')
        self.stages_0_0_pwconv1.weight = self.load_pnnx_bin_as_parameter(archive, 'stages.0.0.pwconv1.weight', (64,16), 'float32')
        self.stages_0_0_pwconv2.bias = self.load_pnnx_bin_as_parameter(archive, 'stages.0.0.pwconv2.bias', (16), 'float32')
        self.stages_0_0_pwconv2.weight = self.load_pnnx_bin_as_parameter(archive, 'stages.0.0.pwconv2.weight', (16,64), 'float32')
        self.op_1_4.bias = self.load_pnnx_bin_as_parameter(archive, 'op_1_4.bias', (16), 'float32')
        self.op_1_4.weight = self.load_pnnx_bin_as_parameter(archive, 'op_1_4.weight', (16), 'float32')
        self.downsample_layers_1_1.bias = self.load_pnnx_bin_as_parameter(archive, 'downsample_layers.1.1.bias', (32), 'float32')
        self.downsample_layers_1_1.weight = self.load_pnnx_bin_as_parameter(archive, 'downsample_layers.1.1.weight', (32,16,2,2), 'float32')
        self.stages_1_0_dwconv.bias = self.load_pnnx_bin_as_parameter(archive, 'stages.1.0.dwconv.bias', (32), 'float32')
        self.stages_1_0_dwconv.weight = self.load_pnnx_bin_as_parameter(archive, 'stages.1.0.dwconv.weight', (32,1,7,7), 'float32')
        self.ln_1.bias = self.load_pnnx_bin_as_parameter(archive, 'ln_1.bias', (32), 'float32')
        self.ln_1.weight = self.load_pnnx_bin_as_parameter(archive, 'ln_1.weight', (32), 'float32')
        self.stages_1_0_pwconv1.bias = self.load_pnnx_bin_as_parameter(archive, 'stages.1.0.pwconv1.bias', (128), 'float32')
        self.stages_1_0_pwconv1.weight = self.load_pnnx_bin_as_parameter(archive, 'stages.1.0.pwconv1.weight', (128,32), 'float32')
        self.stages_1_0_pwconv2.bias = self.load_pnnx_bin_as_parameter(archive, 'stages.1.0.pwconv2.bias', (32), 'float32')
        self.stages_1_0_pwconv2.weight = self.load_pnnx_bin_as_parameter(archive, 'stages.1.0.pwconv2.weight', (32,128), 'float32')
        self.op_1_7.bias = self.load_pnnx_bin_as_parameter(archive, 'op_1_7.bias', (32), 'float32')
        self.op_1_7.weight = self.load_pnnx_bin_as_parameter(archive, 'op_1_7.weight', (32), 'float32')
        self.downsample_layers_2_1.bias = self.load_pnnx_bin_as_parameter(archive, 'downsample_layers.2.1.bias', (64), 'float32')
        self.downsample_layers_2_1.weight = self.load_pnnx_bin_as_parameter(archive, 'downsample_layers.2.1.weight', (64,32,2,2), 'float32')
        self.stages_2_0_dwconv.bias = self.load_pnnx_bin_as_parameter(archive, 'stages.2.0.dwconv.bias', (64), 'float32')
        self.stages_2_0_dwconv.weight = self.load_pnnx_bin_as_parameter(archive, 'stages.2.0.dwconv.weight', (64,1,7,7), 'float32')
        self.ln_2.bias = self.load_pnnx_bin_as_parameter(archive, 'ln_2.bias', (64), 'float32')
        self.ln_2.weight = self.load_pnnx_bin_as_parameter(archive, 'ln_2.weight', (64), 'float32')
        self.stages_2_0_pwconv1.bias = self.load_pnnx_bin_as_parameter(archive, 'stages.2.0.pwconv1.bias', (256), 'float32')
        self.stages_2_0_pwconv1.weight = self.load_pnnx_bin_as_parameter(archive, 'stages.2.0.pwconv1.weight', (256,64), 'float32')
        self.stages_2_0_pwconv2.bias = self.load_pnnx_bin_as_parameter(archive, 'stages.2.0.pwconv2.bias', (64), 'float32')
        self.stages_2_0_pwconv2.weight = self.load_pnnx_bin_as_parameter(archive, 'stages.2.0.pwconv2.weight', (64,256), 'float32')
        self.stages_2_1_dwconv.bias = self.load_pnnx_bin_as_parameter(archive, 'stages.2.1.dwconv.bias', (64), 'float32')
        self.stages_2_1_dwconv.weight = self.load_pnnx_bin_as_parameter(archive, 'stages.2.1.dwconv.weight', (64,1,7,7), 'float32')
        self.ln_3.bias = self.load_pnnx_bin_as_parameter(archive, 'ln_3.bias', (64), 'float32')
        self.ln_3.weight = self.load_pnnx_bin_as_parameter(archive, 'ln_3.weight', (64), 'float32')
        self.stages_2_1_pwconv1.bias = self.load_pnnx_bin_as_parameter(archive, 'stages.2.1.pwconv1.bias', (256), 'float32')
        self.stages_2_1_pwconv1.weight = self.load_pnnx_bin_as_parameter(archive, 'stages.2.1.pwconv1.weight', (256,64), 'float32')
        self.stages_2_1_pwconv2.bias = self.load_pnnx_bin_as_parameter(archive, 'stages.2.1.pwconv2.bias', (64), 'float32')
        self.stages_2_1_pwconv2.weight = self.load_pnnx_bin_as_parameter(archive, 'stages.2.1.pwconv2.weight', (64,256), 'float32')
        self.op_1_10.bias = self.load_pnnx_bin_as_parameter(archive, 'op_1_10.bias', (64), 'float32')
        self.op_1_10.weight = self.load_pnnx_bin_as_parameter(archive, 'op_1_10.weight', (64), 'float32')
        self.downsample_layers_3_1.bias = self.load_pnnx_bin_as_parameter(archive, 'downsample_layers.3.1.bias', (128), 'float32')
        self.downsample_layers_3_1.weight = self.load_pnnx_bin_as_parameter(archive, 'downsample_layers.3.1.weight', (128,64,2,2), 'float32')
        self.stages_3_0_dwconv.bias = self.load_pnnx_bin_as_parameter(archive, 'stages.3.0.dwconv.bias', (128), 'float32')
        self.stages_3_0_dwconv.weight = self.load_pnnx_bin_as_parameter(archive, 'stages.3.0.dwconv.weight', (128,1,7,7), 'float32')
        self.ln_4.bias = self.load_pnnx_bin_as_parameter(archive, 'ln_4.bias', (128), 'float32')
        self.ln_4.weight = self.load_pnnx_bin_as_parameter(archive, 'ln_4.weight', (128), 'float32')
        self.stages_3_0_pwconv1.bias = self.load_pnnx_bin_as_parameter(archive, 'stages.3.0.pwconv1.bias', (512), 'float32')
        self.stages_3_0_pwconv1.weight = self.load_pnnx_bin_as_parameter(archive, 'stages.3.0.pwconv1.weight', (512,128), 'float32')
        self.stages_3_0_pwconv2.bias = self.load_pnnx_bin_as_parameter(archive, 'stages.3.0.pwconv2.bias', (128), 'float32')
        self.stages_3_0_pwconv2.weight = self.load_pnnx_bin_as_parameter(archive, 'stages.3.0.pwconv2.weight', (128,512), 'float32')
        self.op_1_13.bias = self.load_pnnx_bin_as_parameter(archive, 'op_1_13.bias', (256), 'float32')
        self.op_1_13.weight = self.load_pnnx_bin_as_parameter(archive, 'op_1_13.weight', (256), 'float32')
        self.upsample_layers_0_1.bias = self.load_pnnx_bin_as_parameter(archive, 'upsample_layers.0.1.bias', (64), 'float32')
        self.upsample_layers_0_1.weight = self.load_pnnx_bin_as_parameter(archive, 'upsample_layers.0.1.weight', (256,64,2,2), 'float32')
        self.op_1_16.bias = self.load_pnnx_bin_as_parameter(archive, 'op_1_16.bias', (128), 'float32')
        self.op_1_16.weight = self.load_pnnx_bin_as_parameter(archive, 'op_1_16.weight', (128), 'float32')
        self.upsample_layers_1_1.bias = self.load_pnnx_bin_as_parameter(archive, 'upsample_layers.1.1.bias', (32), 'float32')
        self.upsample_layers_1_1.weight = self.load_pnnx_bin_as_parameter(archive, 'upsample_layers.1.1.weight', (128,32,2,2), 'float32')
        self.op_1_19.bias = self.load_pnnx_bin_as_parameter(archive, 'op_1_19.bias', (64), 'float32')
        self.op_1_19.weight = self.load_pnnx_bin_as_parameter(archive, 'op_1_19.weight', (64), 'float32')
        self.upsample_layers_2_1.bias = self.load_pnnx_bin_as_parameter(archive, 'upsample_layers.2.1.bias', (16), 'float32')
        self.upsample_layers_2_1.weight = self.load_pnnx_bin_as_parameter(archive, 'upsample_layers.2.1.weight', (64,16,2,2), 'float32')
        self.op_1_22.bias = self.load_pnnx_bin_as_parameter(archive, 'op_1_22.bias', (32), 'float32')
        self.op_1_22.weight = self.load_pnnx_bin_as_parameter(archive, 'op_1_22.weight', (32), 'float32')
        self.upsample_layers_3_1.bias = self.load_pnnx_bin_as_parameter(archive, 'upsample_layers.3.1.bias', (8), 'float32')
        self.upsample_layers_3_1.weight = self.load_pnnx_bin_as_parameter(archive, 'upsample_layers.3.1.weight', (32,8,2,2), 'float32')
        self.out_conv.bias = self.load_pnnx_bin_as_parameter(archive, 'out_conv.bias', (3), 'float32')
        self.out_conv.weight = self.load_pnnx_bin_as_parameter(archive, 'out_conv.weight', (3,8,1,1), 'float32')
        self.stages_0_0_grn_data = self.load_pnnx_bin_as_parameter(archive, 'stages.0.0.grn.data', (1,1,1,64,), 'float32')
        self.pnnx_unique_2_data = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_2.data', (1,1,1,64,), 'float32')
        self.stages_1_0_grn_data = self.load_pnnx_bin_as_parameter(archive, 'stages.1.0.grn.data', (1,1,1,128,), 'float32')
        self.pnnx_unique_5_data = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_5.data', (1,1,1,128,), 'float32')
        self.stages_2_0_grn_data = self.load_pnnx_bin_as_parameter(archive, 'stages.2.0.grn.data', (1,1,1,256,), 'float32')
        self.pnnx_unique_8_data = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_8.data', (1,1,1,256,), 'float32')
        self.stages_2_1_grn_data = self.load_pnnx_bin_as_parameter(archive, 'stages.2.1.grn.data', (1,1,1,256,), 'float32')
        self.pnnx_unique_10_data = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_10.data', (1,1,1,256,), 'float32')
        self.stages_3_0_grn_data = self.load_pnnx_bin_as_parameter(archive, 'stages.3.0.grn.data', (1,1,1,512,), 'float32')
        self.pnnx_unique_13_data = self.load_pnnx_bin_as_parameter(archive, 'pnnx_unique_13.data', (1,1,1,512,), 'float32')
        archive.close()

    def load_pnnx_bin_as_parameter(self, archive, key, shape, dtype, requires_grad=True):
        return nn.Parameter(self.load_pnnx_bin_as_tensor(archive, key, shape, dtype), requires_grad)

    def load_pnnx_bin_as_tensor(self, archive, key, shape, dtype):
        fd, tmppath = tempfile.mkstemp()
        with os.fdopen(fd, 'wb') as tmpf, archive.open(key) as keyfile:
            tmpf.write(keyfile.read())
        m = np.memmap(tmppath, dtype=dtype, mode='r', shape=shape).copy()
        os.remove(tmppath)
        return torch.from_numpy(m)

    def forward(self, v_0):
        v_1 = self.conv2d_0(v_0)
        v_2 = v_1.permute(dims=(0,2,3,1))
        v_3 = self.op_1_1(v_2)
        v_4 = v_3.permute(dims=(0,3,1,2))
        v_5 = self.stages_0_0_dwconv(v_4)
        v_6 = v_5.permute(dims=(0,2,3,1))
        v_7 = self.ln_0(v_6)
        v_8 = self.stages_0_0_pwconv1(v_7)
        v_9 = self.stages_0_0_act(v_8)
        v_10 = self.stages_0_0_grn_data
        v_11 = self.pnnx_unique_2_data
        v_12 = torch.norm(input=v_9, dim=(1,2), keepdim=True, p=2)
        v_13 = torch.mean(input=v_12, dim=(-1,), keepdim=True)
        v_14 = (((v_11 * (v_9 * (v_12 / (v_13 + 1.000000e-06)))) + v_10) + v_9)
        v_15 = self.stages_0_0_pwconv2(v_14)
        v_16 = v_15.permute(dims=(0,3,1,2))
        v_17 = (v_4 + v_16)
        v_18 = v_17.permute(dims=(0,2,3,1))
        v_19 = self.op_1_4(v_18)
        v_20 = v_19.permute(dims=(0,3,1,2))
        v_21 = self.downsample_layers_1_1(v_20)
        v_22 = self.stages_1_0_dwconv(v_21)
        v_23 = v_22.permute(dims=(0,2,3,1))
        v_24 = self.ln_1(v_23)
        v_25 = self.stages_1_0_pwconv1(v_24)
        v_26 = self.stages_1_0_act(v_25)
        v_27 = self.stages_1_0_grn_data
        v_28 = self.pnnx_unique_5_data
        v_29 = torch.norm(input=v_26, dim=(1,2), keepdim=True, p=2)
        v_30 = torch.mean(input=v_29, dim=(-1,), keepdim=True)
        v_31 = (((v_28 * (v_26 * (v_29 / (v_30 + 1.000000e-06)))) + v_27) + v_26)
        v_32 = self.stages_1_0_pwconv2(v_31)
        v_33 = v_32.permute(dims=(0,3,1,2))
        v_34 = (v_21 + v_33)
        v_35 = v_34.permute(dims=(0,2,3,1))
        v_36 = self.op_1_7(v_35)
        v_37 = v_36.permute(dims=(0,3,1,2))
        v_38 = self.downsample_layers_2_1(v_37)
        v_39 = self.stages_2_0_dwconv(v_38)
        v_40 = v_39.permute(dims=(0,2,3,1))
        v_41 = self.ln_2(v_40)
        v_42 = self.stages_2_0_pwconv1(v_41)
        v_43 = self.stages_2_0_act(v_42)
        v_44 = self.stages_2_0_grn_data
        v_45 = self.pnnx_unique_8_data
        v_46 = torch.norm(input=v_43, dim=(1,2), keepdim=True, p=2)
        v_47 = torch.mean(input=v_46, dim=(-1,), keepdim=True)
        v_48 = (((v_45 * (v_43 * (v_46 / (v_47 + 1.000000e-06)))) + v_44) + v_43)
        v_49 = self.stages_2_0_pwconv2(v_48)
        v_50 = v_49.permute(dims=(0,3,1,2))
        v_51 = (v_38 + v_50)
        v_52 = self.stages_2_1_dwconv(v_51)
        v_53 = v_52.permute(dims=(0,2,3,1))
        v_54 = self.ln_3(v_53)
        v_55 = self.stages_2_1_pwconv1(v_54)
        v_56 = self.stages_2_1_act(v_55)
        v_57 = self.stages_2_1_grn_data
        v_58 = self.pnnx_unique_10_data
        v_59 = torch.norm(input=v_56, dim=(1,2), keepdim=True, p=2)
        v_60 = torch.mean(input=v_59, dim=(-1,), keepdim=True)
        v_61 = (((v_58 * (v_56 * (v_59 / (v_60 + 1.000000e-06)))) + v_57) + v_56)
        v_62 = self.stages_2_1_pwconv2(v_61)
        v_63 = v_62.permute(dims=(0,3,1,2))
        v_64 = (v_51 + v_63)
        v_65 = v_64.permute(dims=(0,2,3,1))
        v_66 = self.op_1_10(v_65)
        v_67 = v_66.permute(dims=(0,3,1,2))
        v_68 = self.downsample_layers_3_1(v_67)
        v_69 = self.stages_3_0_dwconv(v_68)
        v_70 = v_69.permute(dims=(0,2,3,1))
        v_71 = self.ln_4(v_70)
        v_72 = self.stages_3_0_pwconv1(v_71)
        v_73 = self.stages_3_0_act(v_72)
        v_74 = self.stages_3_0_grn_data
        v_75 = self.pnnx_unique_13_data
        v_76 = torch.norm(input=v_73, dim=(1,2), keepdim=True, p=2)
        v_77 = torch.mean(input=v_76, dim=(-1,), keepdim=True)
        v_78 = (((v_75 * (v_73 * (v_76 / (v_77 + 1.000000e-06)))) + v_74) + v_73)
        v_79 = self.stages_3_0_pwconv2(v_78)
        v_80 = v_79.permute(dims=(0,3,1,2))
        v_81 = (v_68 + v_80)
        v_82 = torch.cat((v_81, v_81), dim=1)
        v_83 = v_82.permute(dims=(0,2,3,1))
        v_84 = self.op_1_13(v_83)
        v_85 = v_84.permute(dims=(0,3,1,2))
        v_86 = self.upsample_layers_0_1(v_85)
        v_87 = torch.cat((v_86, v_64), dim=1)
        v_88 = v_87.permute(dims=(0,2,3,1))
        v_89 = self.op_1_16(v_88)
        v_90 = v_89.permute(dims=(0,3,1,2))
        v_91 = self.upsample_layers_1_1(v_90)
        v_92 = torch.cat((v_91, v_34), dim=1)
        v_93 = v_92.permute(dims=(0,2,3,1))
        v_94 = self.op_1_19(v_93)
        v_95 = v_94.permute(dims=(0,3,1,2))
        v_96 = self.upsample_layers_2_1(v_95)
        v_97 = torch.cat((v_96, v_17), dim=1)
        v_98 = v_97.permute(dims=(0,2,3,1))
        v_99 = self.op_1_22(v_98)
        v_100 = v_99.permute(dims=(0,3,1,2))
        v_101 = self.upsample_layers_3_1(v_100)
        v_102 = self.out_conv(v_101)
        return v_102

def export_torchscript():
    net = Model()
    net.eval()

    torch.manual_seed(0)
    v_0 = torch.rand(1, 3, 1088, 1920, dtype=torch.float)

    mod = torch.jit.trace(net, v_0)
    mod.save("convnext_pnnx.py.pt")

def export_onnx():
    net = Model()
    net.eval()

    torch.manual_seed(0)
    v_0 = torch.rand(1, 3, 1088, 1920, dtype=torch.float)

    torch.onnx._export(net, v_0, "convnext_pnnx.py.onnx", export_params=True, operator_export_type=torch.onnx.OperatorExportTypes.ONNX_ATEN_FALLBACK, opset_version=13, input_names=['in0'], output_names=['out0'])

def test_inference():
    net = Model()
    net.eval()

    torch.manual_seed(0)
    v_0 = torch.rand(1, 3, 1088, 1920, dtype=torch.float)

    return net(v_0)

if __name__ == "__main__":
    print(test_inference())
